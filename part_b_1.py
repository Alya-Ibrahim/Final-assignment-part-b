# -*- coding: utf-8 -*-
"""part b-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IO9ja4c6EzUYwLaqojIZ_UQ_HyMt_NdX
"""

# Define the Intersection class to represent each node in the graph
class Intersection:
    def __init__(self, intersection_id):
        # Each intersection has a unique ID
        self.intersection_id = intersection_id
        # List to keep track of roads connected to this intersection
        self.adjacent_roads = []

    # Method to add a road to the intersection's list of connected roads
    def add_road(self, road):
        self.adjacent_roads.append(road)

# Define the Road class to represent the edges in the graph
class Road:
    def __init__(self, road_id, name, length, start_intersection, end_intersection):
        # Unique identifier for the road
        self.road_id = road_id
        # Name of the road for easy identification
        self.name = name
        # Length of the road, which can represent distance or travel time
        self.length = length
        # The intersection where the road begins
        self.start_intersection = start_intersection
        # The intersection where the road ends
        self.end_intersection = end_intersection

# Define the TrafficGraph class to manage the road network graph
class TrafficGraph:
    def __init__(self):
        # Dictionary to hold intersections, key is intersection ID, value is Intersection object
        self.intersections = {}
        # Dictionary to hold roads, key is road ID, value is Road object
        self.roads = {}

    # Method to add an intersection to the graph
    def add_intersection(self, intersection_id):
        # Check if the intersection is already present; if not, add it
        if intersection_id not in self.intersections:
            self.intersections[intersection_id] = Intersection(intersection_id)

    # Method to add a road to the graph
    def add_road(self, road_id, name, length, start_id, end_id):
        # Ensure the start and end intersections are added to the graph
        self.add_intersection(start_id)
        self.add_intersection(end_id)
        # Retrieve the Intersection objects from the intersections dictionary
        start_intersection = self.intersections[start_id]
        end_intersection = self.intersections[end_id]
        # Create a Road object connecting the two intersections
        road = Road(road_id, name, length, start_intersection, end_intersection)
        # Add the road to the start intersection's list of connected roads
        start_intersection.add_road(road)
        # Add the road to the graph's roads dictionary
        self.roads[road_id] = road

    # Method to display the graph's data, useful for debugging and verification
    def display_graph(self):
        # Loop through all intersections and print their connected roads
        for intersection in self.intersections.values():
            print(f"Intersection ID: {intersection.intersection_id}")
            for road in intersection.adjacent_roads:
                print(f"  Road ID: {road.road_id}, Name: {road.name}, Length: {road.length}, Connects to: {road.end_intersection.intersection_id}")